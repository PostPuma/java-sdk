/*
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package PostPuma;

import PostPuma.ApiException;
import org.openapitools.client.model.CreatePostRequest;
import org.openapitools.client.model.DeleteMediaFiles200Response;
import org.openapitools.client.model.DeletePostRequest;
import org.openapitools.client.model.DeletePosts200Response;
import org.openapitools.client.model.DeletePostsRequest;
import org.openapitools.client.model.ListPosts200Response;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.QueuePost200Response;
import org.openapitools.client.model.SchedulePostRequest;
import org.openapitools.client.model.UpdatePostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostsApi
 */
@Disabled
public class PostsApiTest {

    private final PostsApi api = new PostsApi();

    /**
     * Create post
     *
     * Create post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPostTest() throws ApiException {
        CreatePostRequest createPostRequest = null;
        Post response = api.createPost(createPostRequest);
        // TODO: test validations
    }

    /**
     * Delete post
     *
     * Delete post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePostTest() throws ApiException {
        String postUuid = null;
        DeletePostRequest deletePostRequest = null;
        DeletePosts200Response response = api.deletePost(postUuid, deletePostRequest);
        // TODO: test validations
    }

    /**
     * Delete posts
     *
     * Delete posts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePostsTest() throws ApiException {
        DeletePostsRequest deletePostsRequest = null;
        DeletePosts200Response response = api.deletePosts(deletePostsRequest);
        // TODO: test validations
    }

    /**
     * Get post
     *
     * Get post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostTest() throws ApiException {
        String postUuid = null;
        Post response = api.getPost(postUuid);
        // TODO: test validations
    }

    /**
     * List posts
     *
     * List posts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPostsTest() throws ApiException {
        Integer page = null;
        ListPosts200Response response = api.listPosts(page);
        // TODO: test validations
    }

    /**
     * Queue post
     *
     * Queue post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queuePostTest() throws ApiException {
        String postUuid = null;
        QueuePost200Response response = api.queuePost(postUuid);
        // TODO: test validations
    }

    /**
     * Schedule post
     *
     * Schedule post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulePostTest() throws ApiException {
        String postUuid = null;
        SchedulePostRequest schedulePostRequest = null;
        QueuePost200Response response = api.schedulePost(postUuid, schedulePostRequest);
        // TODO: test validations
    }

    /**
     * Update post
     *
     * Update post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePostTest() throws ApiException {
        String postUuid = null;
        UpdatePostRequest updatePostRequest = null;
        DeleteMediaFiles200Response response = api.updatePost(postUuid, updatePostRequest);
        // TODO: test validations
    }

}
