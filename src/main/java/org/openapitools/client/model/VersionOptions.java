/*
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VersionOptionsInstagram;
import org.openapitools.client.model.VersionOptionsLinkedin;
import org.openapitools.client.model.VersionOptionsMastodon;
import org.openapitools.client.model.VersionOptionsPinterest;
import org.openapitools.client.model.VersionOptionsTiktok;
import org.openapitools.client.model.VersionOptionsYoutube;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import PostPuma.JSON;

/**
 * VersionOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T16:39:28.677807+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
public class VersionOptions {
  public static final String SERIALIZED_NAME_TIKTOK = "tiktok";
  @SerializedName(SERIALIZED_NAME_TIKTOK)
  private VersionOptionsTiktok tiktok;

  public static final String SERIALIZED_NAME_YOUTUBE = "youtube";
  @SerializedName(SERIALIZED_NAME_YOUTUBE)
  private VersionOptionsYoutube youtube;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private VersionOptionsLinkedin linkedin;

  public static final String SERIALIZED_NAME_MASTODON = "mastodon";
  @SerializedName(SERIALIZED_NAME_MASTODON)
  private VersionOptionsMastodon mastodon;

  public static final String SERIALIZED_NAME_INSTAGRAM = "instagram";
  @SerializedName(SERIALIZED_NAME_INSTAGRAM)
  private VersionOptionsInstagram instagram;

  public static final String SERIALIZED_NAME_PINTEREST = "pinterest";
  @SerializedName(SERIALIZED_NAME_PINTEREST)
  private VersionOptionsPinterest pinterest;

  public static final String SERIALIZED_NAME_FACEBOOK_PAGE = "facebook_page";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_PAGE)
  private VersionOptionsInstagram facebookPage;

  public VersionOptions() {
  }

  public VersionOptions tiktok(VersionOptionsTiktok tiktok) {
    this.tiktok = tiktok;
    return this;
  }

  /**
   * Get tiktok
   * @return tiktok
   */
  @javax.annotation.Nullable
  public VersionOptionsTiktok getTiktok() {
    return tiktok;
  }

  public void setTiktok(VersionOptionsTiktok tiktok) {
    this.tiktok = tiktok;
  }


  public VersionOptions youtube(VersionOptionsYoutube youtube) {
    this.youtube = youtube;
    return this;
  }

  /**
   * Get youtube
   * @return youtube
   */
  @javax.annotation.Nullable
  public VersionOptionsYoutube getYoutube() {
    return youtube;
  }

  public void setYoutube(VersionOptionsYoutube youtube) {
    this.youtube = youtube;
  }


  public VersionOptions linkedin(VersionOptionsLinkedin linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * Get linkedin
   * @return linkedin
   */
  @javax.annotation.Nullable
  public VersionOptionsLinkedin getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(VersionOptionsLinkedin linkedin) {
    this.linkedin = linkedin;
  }


  public VersionOptions mastodon(VersionOptionsMastodon mastodon) {
    this.mastodon = mastodon;
    return this;
  }

  /**
   * Get mastodon
   * @return mastodon
   */
  @javax.annotation.Nullable
  public VersionOptionsMastodon getMastodon() {
    return mastodon;
  }

  public void setMastodon(VersionOptionsMastodon mastodon) {
    this.mastodon = mastodon;
  }


  public VersionOptions instagram(VersionOptionsInstagram instagram) {
    this.instagram = instagram;
    return this;
  }

  /**
   * Get instagram
   * @return instagram
   */
  @javax.annotation.Nullable
  public VersionOptionsInstagram getInstagram() {
    return instagram;
  }

  public void setInstagram(VersionOptionsInstagram instagram) {
    this.instagram = instagram;
  }


  public VersionOptions pinterest(VersionOptionsPinterest pinterest) {
    this.pinterest = pinterest;
    return this;
  }

  /**
   * Get pinterest
   * @return pinterest
   */
  @javax.annotation.Nullable
  public VersionOptionsPinterest getPinterest() {
    return pinterest;
  }

  public void setPinterest(VersionOptionsPinterest pinterest) {
    this.pinterest = pinterest;
  }


  public VersionOptions facebookPage(VersionOptionsInstagram facebookPage) {
    this.facebookPage = facebookPage;
    return this;
  }

  /**
   * Get facebookPage
   * @return facebookPage
   */
  @javax.annotation.Nullable
  public VersionOptionsInstagram getFacebookPage() {
    return facebookPage;
  }

  public void setFacebookPage(VersionOptionsInstagram facebookPage) {
    this.facebookPage = facebookPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionOptions versionOptions = (VersionOptions) o;
    return Objects.equals(this.tiktok, versionOptions.tiktok) &&
        Objects.equals(this.youtube, versionOptions.youtube) &&
        Objects.equals(this.linkedin, versionOptions.linkedin) &&
        Objects.equals(this.mastodon, versionOptions.mastodon) &&
        Objects.equals(this.instagram, versionOptions.instagram) &&
        Objects.equals(this.pinterest, versionOptions.pinterest) &&
        Objects.equals(this.facebookPage, versionOptions.facebookPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tiktok, youtube, linkedin, mastodon, instagram, pinterest, facebookPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionOptions {\n");
    sb.append("    tiktok: ").append(toIndentedString(tiktok)).append("\n");
    sb.append("    youtube: ").append(toIndentedString(youtube)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    mastodon: ").append(toIndentedString(mastodon)).append("\n");
    sb.append("    instagram: ").append(toIndentedString(instagram)).append("\n");
    sb.append("    pinterest: ").append(toIndentedString(pinterest)).append("\n");
    sb.append("    facebookPage: ").append(toIndentedString(facebookPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tiktok");
    openapiFields.add("youtube");
    openapiFields.add("linkedin");
    openapiFields.add("mastodon");
    openapiFields.add("instagram");
    openapiFields.add("pinterest");
    openapiFields.add("facebook_page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionOptions is not found in the empty JSON string", VersionOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tiktok`
      if (jsonObj.get("tiktok") != null && !jsonObj.get("tiktok").isJsonNull()) {
        VersionOptionsTiktok.validateJsonElement(jsonObj.get("tiktok"));
      }
      // validate the optional field `youtube`
      if (jsonObj.get("youtube") != null && !jsonObj.get("youtube").isJsonNull()) {
        VersionOptionsYoutube.validateJsonElement(jsonObj.get("youtube"));
      }
      // validate the optional field `linkedin`
      if (jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) {
        VersionOptionsLinkedin.validateJsonElement(jsonObj.get("linkedin"));
      }
      // validate the optional field `mastodon`
      if (jsonObj.get("mastodon") != null && !jsonObj.get("mastodon").isJsonNull()) {
        VersionOptionsMastodon.validateJsonElement(jsonObj.get("mastodon"));
      }
      // validate the optional field `instagram`
      if (jsonObj.get("instagram") != null && !jsonObj.get("instagram").isJsonNull()) {
        VersionOptionsInstagram.validateJsonElement(jsonObj.get("instagram"));
      }
      // validate the optional field `pinterest`
      if (jsonObj.get("pinterest") != null && !jsonObj.get("pinterest").isJsonNull()) {
        VersionOptionsPinterest.validateJsonElement(jsonObj.get("pinterest"));
      }
      // validate the optional field `facebook_page`
      if (jsonObj.get("facebook_page") != null && !jsonObj.get("facebook_page").isJsonNull()) {
        VersionOptionsInstagram.validateJsonElement(jsonObj.get("facebook_page"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionOptions>() {
           @Override
           public void write(JsonWriter out, VersionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionOptions
   * @throws IOException if the JSON string is invalid with respect to VersionOptions
   */
  public static VersionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionOptions.class);
  }

  /**
   * Convert an instance of VersionOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

