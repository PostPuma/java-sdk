/*
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package PostPuma;

import PostPuma.ApiCallback;
import PostPuma.ApiClient;
import PostPuma.ApiException;
import PostPuma.ApiResponse;
import PostPuma.Configuration;
import PostPuma.Pair;
import PostPuma.ProgressRequestBody;
import PostPuma.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatePostRequest;
import org.openapitools.client.model.DeleteMediaFiles200Response;
import org.openapitools.client.model.DeletePostRequest;
import org.openapitools.client.model.DeletePosts200Response;
import org.openapitools.client.model.DeletePostsRequest;
import org.openapitools.client.model.ListPosts200Response;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.QueuePost200Response;
import org.openapitools.client.model.SchedulePostRequest;
import org.openapitools.client.model.UpdatePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPost
     * @param createPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPostCall(CreatePostRequest createPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPostRequest;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPostValidateBeforeCall(CreatePostRequest createPostRequest, final ApiCallback _callback) throws ApiException {
        return createPostCall(createPostRequest, _callback);

    }

    /**
     * Create post
     * Create post
     * @param createPostRequest  (optional)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public Post createPost(CreatePostRequest createPostRequest) throws ApiException {
        ApiResponse<Post> localVarResp = createPostWithHttpInfo(createPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create post
     * Create post
     * @param createPostRequest  (optional)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Post> createPostWithHttpInfo(CreatePostRequest createPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createPostValidateBeforeCall(createPostRequest, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create post (asynchronously)
     * Create post
     * @param createPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPostAsync(CreatePostRequest createPostRequest, final ApiCallback<Post> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPostValidateBeforeCall(createPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePost
     * @param postUuid Post UUID (required)
     * @param deletePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostCall(String postUuid, DeletePostRequest deletePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePostRequest;

        // create path and map variables
        String localVarPath = "/posts/{postUuid}"
            .replace("{" + "postUuid" + "}", localVarApiClient.escapeString(postUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePostValidateBeforeCall(String postUuid, DeletePostRequest deletePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postUuid' is set
        if (postUuid == null) {
            throw new ApiException("Missing the required parameter 'postUuid' when calling deletePost(Async)");
        }

        return deletePostCall(postUuid, deletePostRequest, _callback);

    }

    /**
     * Delete post
     * Delete post
     * @param postUuid Post UUID (required)
     * @param deletePostRequest  (optional)
     * @return DeletePosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePosts200Response deletePost(String postUuid, DeletePostRequest deletePostRequest) throws ApiException {
        ApiResponse<DeletePosts200Response> localVarResp = deletePostWithHttpInfo(postUuid, deletePostRequest);
        return localVarResp.getData();
    }

    /**
     * Delete post
     * Delete post
     * @param postUuid Post UUID (required)
     * @param deletePostRequest  (optional)
     * @return ApiResponse&lt;DeletePosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePosts200Response> deletePostWithHttpInfo(String postUuid, DeletePostRequest deletePostRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePostValidateBeforeCall(postUuid, deletePostRequest, null);
        Type localVarReturnType = new TypeToken<DeletePosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete post (asynchronously)
     * Delete post
     * @param postUuid Post UUID (required)
     * @param deletePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostAsync(String postUuid, DeletePostRequest deletePostRequest, final ApiCallback<DeletePosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePostValidateBeforeCall(postUuid, deletePostRequest, _callback);
        Type localVarReturnType = new TypeToken<DeletePosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePosts
     * @param deletePostsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostsCall(DeletePostsRequest deletePostsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePostsRequest;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePostsValidateBeforeCall(DeletePostsRequest deletePostsRequest, final ApiCallback _callback) throws ApiException {
        return deletePostsCall(deletePostsRequest, _callback);

    }

    /**
     * Delete posts
     * Delete posts
     * @param deletePostsRequest  (optional)
     * @return DeletePosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePosts200Response deletePosts(DeletePostsRequest deletePostsRequest) throws ApiException {
        ApiResponse<DeletePosts200Response> localVarResp = deletePostsWithHttpInfo(deletePostsRequest);
        return localVarResp.getData();
    }

    /**
     * Delete posts
     * Delete posts
     * @param deletePostsRequest  (optional)
     * @return ApiResponse&lt;DeletePosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePosts200Response> deletePostsWithHttpInfo(DeletePostsRequest deletePostsRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePostsValidateBeforeCall(deletePostsRequest, null);
        Type localVarReturnType = new TypeToken<DeletePosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete posts (asynchronously)
     * Delete posts
     * @param deletePostsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePostsAsync(DeletePostsRequest deletePostsRequest, final ApiCallback<DeletePosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePostsValidateBeforeCall(deletePostsRequest, _callback);
        Type localVarReturnType = new TypeToken<DeletePosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPost
     * @param postUuid Post UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostCall(String postUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{postUuid}"
            .replace("{" + "postUuid" + "}", localVarApiClient.escapeString(postUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostValidateBeforeCall(String postUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postUuid' is set
        if (postUuid == null) {
            throw new ApiException("Missing the required parameter 'postUuid' when calling getPost(Async)");
        }

        return getPostCall(postUuid, _callback);

    }

    /**
     * Get post
     * Get post
     * @param postUuid Post UUID (required)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public Post getPost(String postUuid) throws ApiException {
        ApiResponse<Post> localVarResp = getPostWithHttpInfo(postUuid);
        return localVarResp.getData();
    }

    /**
     * Get post
     * Get post
     * @param postUuid Post UUID (required)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Post> getPostWithHttpInfo(String postUuid) throws ApiException {
        okhttp3.Call localVarCall = getPostValidateBeforeCall(postUuid, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get post (asynchronously)
     * Get post
     * @param postUuid Post UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostAsync(String postUuid, final ApiCallback<Post> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostValidateBeforeCall(postUuid, _callback);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPosts
     * @param page Page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPostsCall(Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPostsValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        return listPostsCall(page, _callback);

    }

    /**
     * List posts
     * List posts
     * @param page Page (optional)
     * @return ListPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public ListPosts200Response listPosts(Integer page) throws ApiException {
        ApiResponse<ListPosts200Response> localVarResp = listPostsWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * List posts
     * List posts
     * @param page Page (optional)
     * @return ApiResponse&lt;ListPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPosts200Response> listPostsWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = listPostsValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<ListPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List posts (asynchronously)
     * List posts
     * @param page Page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPostsAsync(Integer page, final ApiCallback<ListPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPostsValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<ListPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuePost
     * @param postUuid Post UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuePostCall(String postUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/add-to-queue/{postUuid}"
            .replace("{" + "postUuid" + "}", localVarApiClient.escapeString(postUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuePostValidateBeforeCall(String postUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postUuid' is set
        if (postUuid == null) {
            throw new ApiException("Missing the required parameter 'postUuid' when calling queuePost(Async)");
        }

        return queuePostCall(postUuid, _callback);

    }

    /**
     * Queue post
     * Queue post
     * @param postUuid Post UUID (required)
     * @return QueuePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public QueuePost200Response queuePost(String postUuid) throws ApiException {
        ApiResponse<QueuePost200Response> localVarResp = queuePostWithHttpInfo(postUuid);
        return localVarResp.getData();
    }

    /**
     * Queue post
     * Queue post
     * @param postUuid Post UUID (required)
     * @return ApiResponse&lt;QueuePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueuePost200Response> queuePostWithHttpInfo(String postUuid) throws ApiException {
        okhttp3.Call localVarCall = queuePostValidateBeforeCall(postUuid, null);
        Type localVarReturnType = new TypeToken<QueuePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queue post (asynchronously)
     * Queue post
     * @param postUuid Post UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuePostAsync(String postUuid, final ApiCallback<QueuePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuePostValidateBeforeCall(postUuid, _callback);
        Type localVarReturnType = new TypeToken<QueuePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulePost
     * @param postUuid Post UUID (required)
     * @param schedulePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePostCall(String postUuid, SchedulePostRequest schedulePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulePostRequest;

        // create path and map variables
        String localVarPath = "/posts/schedule/{postUuid}"
            .replace("{" + "postUuid" + "}", localVarApiClient.escapeString(postUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulePostValidateBeforeCall(String postUuid, SchedulePostRequest schedulePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postUuid' is set
        if (postUuid == null) {
            throw new ApiException("Missing the required parameter 'postUuid' when calling schedulePost(Async)");
        }

        return schedulePostCall(postUuid, schedulePostRequest, _callback);

    }

    /**
     * Schedule post
     * Schedule post
     * @param postUuid Post UUID (required)
     * @param schedulePostRequest  (optional)
     * @return QueuePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public QueuePost200Response schedulePost(String postUuid, SchedulePostRequest schedulePostRequest) throws ApiException {
        ApiResponse<QueuePost200Response> localVarResp = schedulePostWithHttpInfo(postUuid, schedulePostRequest);
        return localVarResp.getData();
    }

    /**
     * Schedule post
     * Schedule post
     * @param postUuid Post UUID (required)
     * @param schedulePostRequest  (optional)
     * @return ApiResponse&lt;QueuePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueuePost200Response> schedulePostWithHttpInfo(String postUuid, SchedulePostRequest schedulePostRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulePostValidateBeforeCall(postUuid, schedulePostRequest, null);
        Type localVarReturnType = new TypeToken<QueuePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Schedule post (asynchronously)
     * Schedule post
     * @param postUuid Post UUID (required)
     * @param schedulePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePostAsync(String postUuid, SchedulePostRequest schedulePostRequest, final ApiCallback<QueuePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulePostValidateBeforeCall(postUuid, schedulePostRequest, _callback);
        Type localVarReturnType = new TypeToken<QueuePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePost
     * @param postUuid Post UUID (required)
     * @param updatePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostCall(String postUuid, UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePostRequest;

        // create path and map variables
        String localVarPath = "/posts/{postUuid}"
            .replace("{" + "postUuid" + "}", localVarApiClient.escapeString(postUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePostValidateBeforeCall(String postUuid, UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postUuid' is set
        if (postUuid == null) {
            throw new ApiException("Missing the required parameter 'postUuid' when calling updatePost(Async)");
        }

        return updatePostCall(postUuid, updatePostRequest, _callback);

    }

    /**
     * Update post
     * Update post
     * @param postUuid Post UUID (required)
     * @param updatePostRequest  (optional)
     * @return DeleteMediaFiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMediaFiles200Response updatePost(String postUuid, UpdatePostRequest updatePostRequest) throws ApiException {
        ApiResponse<DeleteMediaFiles200Response> localVarResp = updatePostWithHttpInfo(postUuid, updatePostRequest);
        return localVarResp.getData();
    }

    /**
     * Update post
     * Update post
     * @param postUuid Post UUID (required)
     * @param updatePostRequest  (optional)
     * @return ApiResponse&lt;DeleteMediaFiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMediaFiles200Response> updatePostWithHttpInfo(String postUuid, UpdatePostRequest updatePostRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePostValidateBeforeCall(postUuid, updatePostRequest, null);
        Type localVarReturnType = new TypeToken<DeleteMediaFiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update post (asynchronously)
     * Update post
     * @param postUuid Post UUID (required)
     * @param updatePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostAsync(String postUuid, UpdatePostRequest updatePostRequest, final ApiCallback<DeleteMediaFiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePostValidateBeforeCall(postUuid, updatePostRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteMediaFiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
